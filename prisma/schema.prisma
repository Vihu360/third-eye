// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models creation

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
	password      String
  emailVerified Boolean?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
	purchases     CreditPurchase[]
  games         Game[]    @relation("GameParticipants") // Games the user has participated in
	results       Result[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Game model to represent game instances
model Game {
  id          String   @id @default(cuid())
  name        String   // Name of the game (e.g., "Coin Toss")
  description String?  // Description of the game
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  results     Result[] // Results of the game
  participants User[]   @relation("GameParticipants")
}

// CreditPurchase model to track credit purchases

model CreditPurchase {
  id        String      @id @default(cuid())
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// Result model to record outcomes of games
model Result {
  id        String   @id @default(cuid())
  gameId    String   // Foreign key to the Game
  winnerId  String?  // User ID of the winner (if applicable)
  outcome   String   // Description of the outcome (e.g., "User1 wins!")
  createdAt DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])
  winner User? @relation(fields: [winnerId], references: [id])
}

// Transaction model for tracking user investments or payouts
model Transaction {
  id          String   @id @default(cuid())
  userId      String   // Foreign key to the User
  amount      Float    // Amount of money involved in the transaction
  type        String   // Type of transaction (e.g., "investment", "payout")
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
